# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x64
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug_x64)
TARGETDIR = ../bin/Windows-gmake2/Debug-x64/Spitfire
TARGET = $(TARGETDIR)/Spitfire.lib
OBJDIR = ../bin-int/Windows-gmake2/Debug-x64/Spitfire
DEFINES += -DSPITFIRE_ARCHITECTURE_X64 -DSPITFIRE_DEBUG -DSPITFIRE_COMPILER_GMAKE -DSPITFIRE_PLATFORM_WINDOWS -DGLEW_STATIC -DSPITFIRE_USE_OPENGL -DPROJECTCORE_ARCHITECTURE_X64 -DPROJECTCORE_DEBUG -DPROJECTCORE_COMPILER_GMAKE -DPROJECTCORE_PLATFORM_WINDOWS
INCLUDES += -IDependencies/GLEW/include -IDependencies/GLFW/x64/include -I. -I. -Isrc -IDependencies -IDependencies/ImGui -I../ProjectCore/src -I../ProjectCore/src/ProjectCore
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O0 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O0 -g -std=c++20
LIBS += ../bin/Windows-gmake2/Debug-x64/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Debug-x64/ImGui/ImGui.lib -lglfw3_mt -lUser32.lib -lGdi32.lib -lShell32.lib -lglew32s -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Debug-x64/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Debug-x64/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -LDependencies/GLFW/x64/lib-vc2019 -LDependencies/GLEW/lib/Release/x64 -L/usr/lib64 -m64

else ifeq ($(config),debug_x86)
TARGETDIR = ../bin/Windows-gmake2/Debug-x86/Spitfire
TARGET = $(TARGETDIR)/Spitfire.lib
OBJDIR = ../bin-int/Windows-gmake2/Debug-x86/Spitfire
DEFINES += -DSPITFIRE_ARCHITECTURE_X86 -DSPITFIRE_DEBUG -DSPITFIRE_COMPILER_GMAKE -DSPITFIRE_PLATFORM_WINDOWS -DGLEW_STATIC -DSPITFIRE_USE_OPENGL -DPROJECTCORE_ARCHITECTURE_X86 -DPROJECTCORE_DEBUG -DPROJECTCORE_COMPILER_GMAKE -DPROJECTCORE_PLATFORM_WINDOWS
INCLUDES += -IDependencies/GLEW/include -IDependencies/GLFW/x86/include -I. -I. -Isrc -IDependencies -IDependencies/ImGui -I../ProjectCore/src -I../ProjectCore/src/ProjectCore
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O0 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O0 -g -std=c++20
LIBS += ../bin/Windows-gmake2/Debug-x86/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Debug-x86/ImGui/ImGui.lib -lglfw3_mt -lUser32.lib -lGdi32.lib -lShell32.lib -lglew32s -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Debug-x86/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Debug-x86/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -LDependencies/GLFW/x86/lib-vc2019 -LDependencies/GLEW/lib/Release/x86 -L/usr/lib32 -m32

else ifeq ($(config),release_x64)
TARGETDIR = ../bin/Windows-gmake2/Release-x64/Spitfire
TARGET = $(TARGETDIR)/Spitfire.lib
OBJDIR = ../bin-int/Windows-gmake2/Release-x64/Spitfire
DEFINES += -DSPITFIRE_ARCHITECTURE_X64 -DSPITFIRE_RELEASE -DSPITFIRE_COMPILER_GMAKE -DSPITFIRE_PLATFORM_WINDOWS -DGLEW_STATIC -DSPITFIRE_USE_OPENGL -DPROJECTCORE_ARCHITECTURE_X64 -DPROJECTCORE_RELEASE -DPROJECTCORE_COMPILER_GMAKE -DPROJECTCORE_PLATFORM_WINDOWS
INCLUDES += -IDependencies/GLEW/include -IDependencies/GLFW/x64/include -I. -I. -Isrc -IDependencies -IDependencies/ImGui -I../ProjectCore/src -I../ProjectCore/src/ProjectCore
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -g -std=c++20
LIBS += ../bin/Windows-gmake2/Release-x64/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Release-x64/ImGui/ImGui.lib -lglfw3_mt -lUser32.lib -lGdi32.lib -lShell32.lib -lglew32s -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Release-x64/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Release-x64/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -LDependencies/GLFW/x64/lib-vc2019 -LDependencies/GLEW/lib/Release/x64 -L/usr/lib64 -m64

else ifeq ($(config),release_x86)
TARGETDIR = ../bin/Windows-gmake2/Release-x86/Spitfire
TARGET = $(TARGETDIR)/Spitfire.lib
OBJDIR = ../bin-int/Windows-gmake2/Release-x86/Spitfire
DEFINES += -DSPITFIRE_ARCHITECTURE_X86 -DSPITFIRE_RELEASE -DSPITFIRE_COMPILER_GMAKE -DSPITFIRE_PLATFORM_WINDOWS -DGLEW_STATIC -DSPITFIRE_USE_OPENGL -DPROJECTCORE_ARCHITECTURE_X86 -DPROJECTCORE_RELEASE -DPROJECTCORE_COMPILER_GMAKE -DPROJECTCORE_PLATFORM_WINDOWS
INCLUDES += -IDependencies/GLEW/include -IDependencies/GLFW/x86/include -I. -I. -Isrc -IDependencies -IDependencies/ImGui -I../ProjectCore/src -I../ProjectCore/src/ProjectCore
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -g -std=c++20
LIBS += ../bin/Windows-gmake2/Release-x86/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Release-x86/ImGui/ImGui.lib -lglfw3_mt -lUser32.lib -lGdi32.lib -lShell32.lib -lglew32s -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Release-x86/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Release-x86/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -LDependencies/GLFW/x86/lib-vc2019 -LDependencies/GLEW/lib/Release/x86 -L/usr/lib32 -m32

else ifeq ($(config),dist_x64)
TARGETDIR = ../bin/Windows-gmake2/Dist-x64/Spitfire
TARGET = $(TARGETDIR)/Spitfire.lib
OBJDIR = ../bin-int/Windows-gmake2/Dist-x64/Spitfire
DEFINES += -DSPITFIRE_ARCHITECTURE_X64 -DSPITFIRE_DIST -DSPITFIRE_COMPILER_GMAKE -DSPITFIRE_PLATFORM_WINDOWS -DGLEW_STATIC -DSPITFIRE_USE_OPENGL -DPROJECTCORE_ARCHITECTURE_X64 -DPROJECTCORE_DIST -DPROJECTCORE_COMPILER_GMAKE -DPROJECTCORE_PLATFORM_WINDOWS
INCLUDES += -IDependencies/GLEW/include -IDependencies/GLFW/x64/include -I. -I. -Isrc -IDependencies -IDependencies/ImGui -I../ProjectCore/src -I../ProjectCore/src/ProjectCore
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O3
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -std=c++20
LIBS += ../bin/Windows-gmake2/Dist-x64/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Dist-x64/ImGui/ImGui.lib -lglfw3_mt -lUser32.lib -lGdi32.lib -lShell32.lib -lglew32s -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Dist-x64/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Dist-x64/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -LDependencies/GLFW/x64/lib-vc2019 -LDependencies/GLEW/lib/Release/x64 -L/usr/lib64 -m64 -s

else ifeq ($(config),dist_x86)
TARGETDIR = ../bin/Windows-gmake2/Dist-x86/Spitfire
TARGET = $(TARGETDIR)/Spitfire.lib
OBJDIR = ../bin-int/Windows-gmake2/Dist-x86/Spitfire
DEFINES += -DSPITFIRE_ARCHITECTURE_X86 -DSPITFIRE_DIST -DSPITFIRE_COMPILER_GMAKE -DSPITFIRE_PLATFORM_WINDOWS -DGLEW_STATIC -DSPITFIRE_USE_OPENGL -DPROJECTCORE_ARCHITECTURE_X86 -DPROJECTCORE_DIST -DPROJECTCORE_COMPILER_GMAKE -DPROJECTCORE_PLATFORM_WINDOWS
INCLUDES += -IDependencies/GLEW/include -IDependencies/GLFW/x86/include -I. -I. -Isrc -IDependencies -IDependencies/ImGui -I../ProjectCore/src -I../ProjectCore/src/ProjectCore
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O3
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -std=c++20
LIBS += ../bin/Windows-gmake2/Dist-x86/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Dist-x86/ImGui/ImGui.lib -lglfw3_mt -lUser32.lib -lGdi32.lib -lShell32.lib -lglew32s -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Dist-x86/ProjectCore/ProjectCore.lib ../bin/Windows-gmake2/Dist-x86/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -LDependencies/GLFW/x86/lib-vc2019 -LDependencies/GLEW/lib/Release/x86 -L/usr/lib32 -m32 -s

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/Application.o
GENERATED += $(OBJDIR)/ApplicationOpenGL.o
GENERATED += $(OBJDIR)/Core.o
GENERATED += $(OBJDIR)/Core1.o
GENERATED += $(OBJDIR)/ImGuiBuild.o
GENERATED += $(OBJDIR)/ImGuiLayer.o
GENERATED += $(OBJDIR)/ImGuiLayerOpenGL.o
GENERATED += $(OBJDIR)/Input.o
GENERATED += $(OBJDIR)/Layer.o
GENERATED += $(OBJDIR)/LayerStack.o
GENERATED += $(OBJDIR)/OrthographicCamera.o
GENERATED += $(OBJDIR)/OrthographicCameraController.o
GENERATED += $(OBJDIR)/PixelGame.o
GENERATED += $(OBJDIR)/Renderer.o
GENERATED += $(OBJDIR)/Shader.o
GENERATED += $(OBJDIR)/Texture.o
GENERATED += $(OBJDIR)/VertexArray.o
GENERATED += $(OBJDIR)/VertexBuffer.o
GENERATED += $(OBJDIR)/VertexBufferLayout.o
OBJECTS += $(OBJDIR)/Application.o
OBJECTS += $(OBJDIR)/ApplicationOpenGL.o
OBJECTS += $(OBJDIR)/Core.o
OBJECTS += $(OBJDIR)/Core1.o
OBJECTS += $(OBJDIR)/ImGuiBuild.o
OBJECTS += $(OBJDIR)/ImGuiLayer.o
OBJECTS += $(OBJDIR)/ImGuiLayerOpenGL.o
OBJECTS += $(OBJDIR)/Input.o
OBJECTS += $(OBJDIR)/Layer.o
OBJECTS += $(OBJDIR)/LayerStack.o
OBJECTS += $(OBJDIR)/OrthographicCamera.o
OBJECTS += $(OBJDIR)/OrthographicCameraController.o
OBJECTS += $(OBJDIR)/PixelGame.o
OBJECTS += $(OBJDIR)/Renderer.o
OBJECTS += $(OBJDIR)/Shader.o
OBJECTS += $(OBJDIR)/Texture.o
OBJECTS += $(OBJDIR)/VertexArray.o
OBJECTS += $(OBJDIR)/VertexBuffer.o
OBJECTS += $(OBJDIR)/VertexBufferLayout.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking Spitfire
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning Spitfire
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) del /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/ApplicationOpenGL.o: src/GraphicsPlatform/OpenGL/Application/ApplicationOpenGL.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VertexArray.o: src/GraphicsPlatform/OpenGL/Detail/Asset/VertexArray.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VertexBuffer.o: src/GraphicsPlatform/OpenGL/Detail/Asset/VertexBuffer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VertexBufferLayout.o: src/GraphicsPlatform/OpenGL/Detail/Asset/VertexBufferLayout.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Core.o: src/GraphicsPlatform/OpenGL/Detail/Core/Core.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Renderer.o: src/GraphicsPlatform/OpenGL/Detail/Renderer/Renderer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Shader.o: src/GraphicsPlatform/OpenGL/Detail/Shader/Shader.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Texture.o: src/GraphicsPlatform/OpenGL/Detail/Texture/Texture.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ImGuiBuild.o: src/GraphicsPlatform/OpenGL/ImGui/ImGuiBuild.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ImGuiLayerOpenGL.o: src/GraphicsPlatform/OpenGL/ImGui/ImGuiLayerOpenGL.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/PixelGame.o: src/Spitfire/AddOn/PixelGame/PixelGame.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Application.o: src/Spitfire/Core/Application/Application.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Core1.o: src/Spitfire/Core/Core.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ImGuiLayer.o: src/Spitfire/Core/ImGui/ImGuiLayer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Input.o: src/Spitfire/Core/Input/Input.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Layer.o: src/Spitfire/Core/Layer/Layer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LayerStack.o: src/Spitfire/Core/Layer/LayerStack.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OrthographicCamera.o: src/Spitfire/Core/OrthographicCamera/OrthographicCamera.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OrthographicCameraController.o: src/Spitfire/Core/OrthographicCamera/OrthographicCameraController.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif